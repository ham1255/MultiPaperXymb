From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Tue, 1 Nov 2022 11:29:39 +0100
Subject: [PATCH] MultiPaper player spatial list.


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fb1ae2f92461d5671c19521e0fd795d8c14487b7..b279fd33b96fd465d2602068c02b06ec245e5a5c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1546,6 +1546,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
                 entityplayer.connection.send(packet); // Add support for per player time
             }
+            long start = System.nanoTime();
+            world.playersSpatial.update(world.players); // MultiPaper
+            xymb.RapidLogger.i().timedLogRaw(start, "UPDATE_SPATIAL_PLAYERS;" + world.getWorld().getName()); // Xymb
         }
         // Paper end
         MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index f2edf8a48dfc0a85ed3fce8d8254218a0330f2a3..bab4f4423538fc0f3b176b2cfb8336f6c58131fc 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -178,11 +178,13 @@ import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperChunkHandler;
 import puregero.multipaper.MultiPaperEntitiesHandler;
 import puregero.multipaper.MultiPaperGameEventHandler;
 import puregero.multipaper.MultiPaperInactiveTracker;
+import puregero.multipaper.MultiPaperPlayerSpatialMap;
 import puregero.multipaper.externalserverprotocol.SpawnUpdatePacket;
 import puregero.multipaper.externalserverprotocol.TimeUpdatePacket;
 
@@ -228,6 +230,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private final StructureCheck structureCheck;
     private final boolean tickTime;
     public long lastMidTickExecuteFailure; // Paper - execute chunk tasks mid tick
+    public MultiPaperPlayerSpatialMap playersSpatial = new MultiPaperPlayerSpatialMap(); // MultiPaper
 
     // CraftBukkit start
     public final LevelStorageSource.LevelStorageAccess convertable;
@@ -618,6 +621,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (net.minecraft.world.entity.EntitySelector.affectsSpawning.test(player)) {
                 this.playersAffectingSpawning.add(player);
             }
+            if (MultiPaper.isExternalPlayer(player)) { // MultiPaper
+                ((ExternalPlayer)player).relevant = playersSpatial.isExternalPlayerRelevant(player);
+            }
         }
         // Paper end - optimise checkDespawn
         ProfilerFiller gameprofilerfiller = this.getProfiler();
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 59d9976175d98a17dad4d23afe43f2842fb20b11..7705c8b4cb282a0c57b8044ae4964aef7e9f1812 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -40,6 +40,7 @@ public class ExternalPlayer extends ServerPlayer {
     private final InetSocketAddress address;
     private boolean sendPackets = true;
     public boolean updatingData = false;
+    public boolean relevant = true;
 
     public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, ProfilePublicKey profilePublicKey, String advancements, String stats, int entityId) {
         loadedAdvancements.put(gameProfile.getId(), advancements);
diff --git a/src/main/java/puregero/multipaper/MultiPaperPlayerSpatialMap.java b/src/main/java/puregero/multipaper/MultiPaperPlayerSpatialMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..283c871a48a684c545ab351827f9a3d352b4fb11
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperPlayerSpatialMap.java
@@ -0,0 +1,69 @@
+package puregero.multipaper;
+
+
+import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import java.util.List;
+import net.minecraft.server.level.ServerPlayer;
+
+public class MultiPaperPlayerSpatialMap {
+    private Long2ObjectOpenHashMap localPlayersMap = new Long2ObjectOpenHashMap();
+    private Long2ObjectOpenHashMap allPlayersMap = new Long2ObjectOpenHashMap();
+
+    // We assume that players that are more than 32 chunks away can't interact in any way
+    private static final long REGION_SIZE = 32 * 16;
+
+    private static long coordsToIndex(long x, long z) {
+        return (x + 120000 * REGION_SIZE) / REGION_SIZE + (((z + 120000 * REGION_SIZE) / REGION_SIZE) << 31);
+    }
+
+    public boolean isExternalPlayerRelevant(ServerPlayer player) {
+        long index = coordsToIndex((int)player.getX(), (int)player.getZ());
+        return localPlayersMap.get(index) != null;
+    }
+
+    public void update(List<ServerPlayer> players) {
+        Long2IntOpenHashMap localBuckets = new Long2IntOpenHashMap(players.size());
+        Long2IntOpenHashMap allBuckets = new Long2IntOpenHashMap(players.size());
+        long index[] = new long[9];
+        for (ServerPlayer player: players) {
+            for (int x = -1 ; x <= 1 ; x++) {
+                for (int z = -1 ; z <= 1 ; z++) {
+                    index[x + z * 3 + 4] = coordsToIndex((int)player.getX() + (int)(x * REGION_SIZE), (int)player.getZ() + (int)(z * REGION_SIZE));
+                }
+            }
+            if (!MultiPaper.isExternalPlayer(player)) {
+                for (int i = 0 ; i < 9 ; i++) localBuckets.addTo(index[i], 1);
+            }
+            for (int i = 0 ; i < 9 ; i++) allBuckets.addTo(index[i], 1);
+        }
+        Long2IntOpenHashMap localAddedCounts = new Long2IntOpenHashMap(localBuckets.size());
+        Long2IntOpenHashMap allAddedCounts = new Long2IntOpenHashMap(allBuckets.size());
+        localPlayersMap = new Long2ObjectOpenHashMap(localBuckets.size(), Long2ObjectOpenHashMap.VERY_FAST_LOAD_FACTOR);
+        allPlayersMap = new Long2ObjectOpenHashMap(allBuckets.size(), Long2ObjectOpenHashMap.VERY_FAST_LOAD_FACTOR);
+        localBuckets.long2IntEntrySet().fastForEach((entry) -> {
+            localPlayersMap.put(entry.getLongKey(), new Object[entry.getIntValue()]);
+        });
+        allBuckets.long2IntEntrySet().fastForEach((entry) -> {
+            allPlayersMap.put(entry.getLongKey(), new Object[entry.getIntValue()]);
+        });
+        for (ServerPlayer player: players) {
+            for (int x = -1 ; x <= 1 ; x++) {
+                for (int z = -1 ; z <= 1 ; z++) {
+                    index[x + z * 3 + 4] = coordsToIndex((int)player.getX() + (int)(x * REGION_SIZE), (int)player.getZ() + (int)(z * REGION_SIZE));
+                }
+            }
+            if (!MultiPaper.isExternalPlayer(player)) {
+                for (int i = 0 ; i < 9 ; i++) {
+                    ((Object[])localPlayersMap.get(index[i]))[localAddedCounts.get(index[i])] = player;
+                    localAddedCounts.addTo(index[i], 1);
+                }
+            }
+            for (int i = 0 ; i < 9 ; i++) {
+                ((Object[])allPlayersMap.get(index[i]))[allAddedCounts.get(index[i])] = player;
+                allAddedCounts.addTo(index[i], 1);
+            }
+        }
+    }
+
+}
