From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Sat, 29 Oct 2022 06:55:39 +0200
Subject: [PATCH] Players mass disconnecting no longer crash the server.


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 17586ce9a1a48c0cc84b31f77cb2c172c0194fe0..f53c9e3de2e78490263c284b53c8ddd10415b2fd 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1025,7 +1025,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     private void processUnloads(BooleanSupplier shouldKeepTicking) {
         LongIterator longiterator = this.toDrop.iterator();
-        for (int i = 0; longiterator.hasNext() && (shouldKeepTicking.getAsBoolean() || i < 200 || this.toDrop.size() > 2000); longiterator.remove()) { // Paper - diff on change
+        final long UNLOAD_TIME_LIMIT = 10000000;
+        long unloadLimit = System.nanoTime();
+        int counter = 0;
+        for (int i = 0; longiterator.hasNext() && (i < 20 || System.nanoTime() - unloadLimit < UNLOAD_TIME_LIMIT) && (shouldKeepTicking.getAsBoolean() || i < 200 || this.toDrop.size() > 2000); longiterator.remove()) { // Paper - diff on change
             long j = longiterator.nextLong();
             ChunkHolder playerchunk = this.updatingChunks.queueRemove(j); // Paper - Don't copy
 
@@ -1036,16 +1039,25 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 ++i;
                 this.scheduleUnload(j, playerchunk);
             }
+            counter += 1;
         }
+        if (counter > 0 && false)
+            System.out.println("ToDrop " + String.valueOf(counter) + " " + String.valueOf(System.nanoTime() - unloadLimit));
 
         int k = Math.max(100, this.unloadQueue.size() - 2000); // Paper - Unload more than just up to queue size 2000
+        k = Math.min(2000, k);
 
         Runnable runnable;
 
+        long start = System.nanoTime();
+        counter = 0;
         while ((shouldKeepTicking.getAsBoolean() || k > 0) && (runnable = (Runnable) this.unloadQueue.poll()) != null) {
             --k;
+            counter++;
             runnable.run();
         }
+        if (counter > 0 && false)
+            System.out.println("Unload " + String.valueOf(counter) + " " + String.valueOf(System.nanoTime() - start));
 
         int l = 0;
         // Paper - incremental chunk and player saving
