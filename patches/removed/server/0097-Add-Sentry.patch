From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Tue, 9 Nov 2021 14:08:14 -0500
Subject: [PATCH] Add Sentry


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index 52b9e0705f743bb3d03f97adc0dac9f276caed38..bb3332ee067708598cce5613664af3d1b8bb9106 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -26,10 +26,10 @@ import org.simpleyaml.configuration.file.YamlFile;
 import org.simpleyaml.exceptions.InvalidConfigurationException;
 
 public class PufferfishConfig {
-	
+
 	private static final YamlFile config = new YamlFile();
 	private static int updates = 0;
-	
+
 	private static ConfigurationSection convertToBukkit(org.simpleyaml.configuration.ConfigurationSection section) {
 		ConfigurationSection newSection = new MemoryConfiguration();
 		for (String key : section.getKeys(false)) {
@@ -41,18 +41,18 @@ public class PufferfishConfig {
 		}
 		return newSection;
 	}
-	
+
 	public static ConfigurationSection getConfigCopy() {
 		return convertToBukkit(config);
 	}
-	
+
 	public static int getUpdates() {
 		return updates;
 	}
-	
+
 	public static void load() throws IOException {
 		File configFile = new File("pufferfish.yml");
-		
+
 		if (configFile.exists()) {
 			try {
 				config.load(configFile);
@@ -60,14 +60,14 @@ public class PufferfishConfig {
 				throw new IOException(e);
 			}
 		}
-		
+
 		getString("info.version", "1.0");
 		setComment("info",
 				"Pufferfish Configuration",
 				"Check out Pufferfish Host for maximum performance server hosting: https://pufferfish.host",
 				"Join our Discord for support: https://discord.gg/reZw4vQV9H",
 				"Download new builds at https://ci.pufferfish.host/job/Pufferfish");
-		
+
 		for (Method method : PufferfishConfig.class.getDeclaredMethods()) {
 			if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers()) && method.getParameterCount() == 0 &&
 					method.getReturnType() == Void.TYPE && !method.getName().startsWith("lambda")) {
@@ -79,18 +79,18 @@ public class PufferfishConfig {
 				}
 			}
 		}
-		
+
 		updates++;
-		
+
 		config.save(configFile);
 	}
-	
+
 	private static void setComment(String key, String... comment) {
 		if (config.contains(key)) {
 			config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
 		}
 	}
-	
+
 	public static boolean enableBooks;
 	private static void books() {
 		enableBooks = getBoolean("enable-books", true,
@@ -99,7 +99,7 @@ public class PufferfishConfig {
 				"disabling this option.",
 				"This can be overridden per-player with the permission pufferfish.usebooks");
 	}
-	
+
 	public static boolean enableAsyncMobSpawning;
 	public static boolean asyncMobSpawningInitialized;
 	private static void asyncMobSpawning() {
@@ -109,7 +109,7 @@ public class PufferfishConfig {
 				"paper's per-player-mob-spawns setting set to true for this to work.",
 				"One quick note - this does not actually spawn mobs async (that would be very unsafe).",
 				"This just offloads some expensive calculations that are required for mob spawning.");
-		
+
 		// This prevents us from changing the value during a reload.
 		if (!asyncMobSpawningInitialized) {
 			asyncMobSpawningInitialized = true;
@@ -140,54 +140,54 @@ public class PufferfishConfig {
 			entityType.ttl = config.getInt("entity_timeouts." + type, -1);
 		}
 	}
-	
+
 	private static void ensureDefault(String key, Object defaultValue, String... comment) {
 		if (!config.contains(key)) {
 			config.set(key, defaultValue);
 			config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
 		}
 	}
-	
+
 	private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
 		return getBoolean(key, null, defaultValue, comment);
 	}
-	
+
 	private static boolean getBoolean(String key, @Nullable String oldKey, boolean defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getBoolean(key, defaultValue);
 	}
-	
+
 	private static int getInt(String key, int defaultValue, String... comment) {
 		return getInt(key, null, defaultValue, comment);
 	}
-	
+
 	private static int getInt(String key, @Nullable String oldKey, int defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getInt(key, defaultValue);
 	}
-	
+
 	private static double getDouble(String key, double defaultValue, String... comment) {
 		return getDouble(key, null, defaultValue, comment);
 	}
-	
+
 	private static double getDouble(String key, @Nullable String oldKey, double defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getDouble(key, defaultValue);
 	}
-	
+
 	private static String getString(String key, String defaultValue, String... comment) {
 		return getOldString(key, null, defaultValue, comment);
 	}
-	
+
 	private static String getOldString(String key, @Nullable String oldKey, String defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getString(key, defaultValue);
 	}
-	
+
 	private static List<String> getStringList(String key, List<String> defaultValue, String... comment) {
 		return getStringList(key, null, defaultValue, comment);
 	}
-	
+
 	private static List<String> getStringList(String key, @Nullable String oldKey, List<String> defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getStringList(key);
@@ -231,5 +231,16 @@ public class PufferfishConfig {
 		setComment("misc", "Settings for things that don't belong elsewhere");
 	}
 
+	public static String sentryDsn;
+	private static void sentry() {
+		String sentryEnvironment = System.getenv("SENTRY_DSN");
+		String sentryConfig = getString("sentry-dsn", "", "Sentry DSN for improved error logging, leave blank to disable", "Obtain from https://sentry.io/");
+
+		sentryDsn = sentryEnvironment == null ? sentryConfig : sentryEnvironment;
+		if (sentryDsn != null && !sentryDsn.isBlank()) {
+			gg.pufferfish.pufferfish.sentry.SentryManager.init();
+		}
+	}
+
 
 }
diff --git a/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java b/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java
new file mode 100644
index 0000000000000000000000000000000000000000..d04a8a4336566dbe6e1b9ec0d574cff43e003fa8
--- /dev/null
+++ b/src/main/java/gg/pufferfish/pufferfish/sentry/PufferfishSentryAppender.java
@@ -0,0 +1,135 @@
+package gg.pufferfish.pufferfish.sentry;
+
+import com.google.common.reflect.TypeToken;
+import com.google.gson.Gson;
+import io.sentry.Breadcrumb;
+import io.sentry.Sentry;
+import io.sentry.SentryEvent;
+import io.sentry.SentryLevel;
+import io.sentry.protocol.Message;
+import io.sentry.protocol.User;
+import java.util.Map;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.appender.AbstractAppender;
+import org.apache.logging.log4j.core.filter.AbstractFilter;
+
+public class PufferfishSentryAppender extends AbstractAppender {
+
+	private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger(PufferfishSentryAppender.class);
+	private static final Gson GSON = new Gson();
+
+	public PufferfishSentryAppender() {
+		super("PufferfishSentryAdapter", new SentryFilter(), null);
+	}
+
+	@Override
+	public void append(LogEvent logEvent) {
+		if (logEvent.getThrown() != null && logEvent.getLevel().isMoreSpecificThan(Level.WARN)) {
+			try {
+				logException(logEvent);
+			} catch (Exception e) {
+				logger.warn("Failed to log event with sentry", e);
+			}
+		} else {
+			try {
+				logBreadcrumb(logEvent);
+			} catch (Exception e) {
+				logger.warn("Failed to log event with sentry", e);
+			}
+		}
+	}
+
+	private void logException(LogEvent e) {
+		SentryEvent event = new SentryEvent(e.getThrown());
+
+		Message sentryMessage = new Message();
+		sentryMessage.setMessage(e.getMessage().getFormattedMessage());
+
+		event.setThrowable(e.getThrown());
+		event.setLevel(getLevel(e.getLevel()));
+		event.setLogger(e.getLoggerName());
+		event.setTransaction(e.getLoggerName());
+		event.setExtra("thread_name", e.getThreadName());
+
+		boolean hasContext = e.getContextData() != null;
+
+		if (hasContext && e.getContextData().containsKey("pufferfishsentry_playerid")) {
+			User user = new User();
+			user.setId(e.getContextData().getValue("pufferfishsentry_playerid"));
+			user.setUsername(e.getContextData().getValue("pufferfishsentry_playername"));
+			event.setUser(user);
+		}
+
+		if (hasContext && e.getContextData().containsKey("pufferfishsentry_pluginname")) {
+			event.setExtra("plugin.name", e.getContextData().getValue("pufferfishsentry_pluginname"));
+			event.setExtra("plugin.version", e.getContextData().getValue("pufferfishsentry_pluginversion"));
+			event.setTransaction(e.getContextData().getValue("pufferfishsentry_pluginname"));
+		}
+
+		if (hasContext && e.getContextData().containsKey("pufferfishsentry_eventdata")) {
+			Map<String, String> eventFields = GSON.fromJson((String) e.getContextData().getValue("pufferfishsentry_eventdata"), new TypeToken<Map<String, String>>() {}.getType());
+			if (eventFields != null) {
+				event.setExtra("event", eventFields);
+			}
+		}
+
+		Sentry.captureEvent(event);
+	}
+
+	private void logBreadcrumb(LogEvent e) {
+		Breadcrumb breadcrumb = new Breadcrumb();
+
+		breadcrumb.setLevel(getLevel(e.getLevel()));
+		breadcrumb.setCategory(e.getLoggerName());
+		breadcrumb.setType(e.getLoggerName());
+		breadcrumb.setMessage(e.getMessage().getFormattedMessage());
+
+		Sentry.addBreadcrumb(breadcrumb);
+	}
+
+	private SentryLevel getLevel(Level level) {
+		switch (level.getStandardLevel()) {
+			case TRACE:
+			case DEBUG:
+				return SentryLevel.DEBUG;
+			case WARN:
+				return SentryLevel.WARNING;
+			case ERROR:
+				return SentryLevel.ERROR;
+			case FATAL:
+				return SentryLevel.FATAL;
+			case INFO:
+			default:
+				return SentryLevel.INFO;
+		}
+	}
+
+	private static class SentryFilter extends AbstractFilter {
+
+		@Override
+		public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, String msg,
+				Object... params) {
+			return this.filter(logger.getName());
+		}
+
+		@Override
+		public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, Object msg, Throwable t) {
+			return this.filter(logger.getName());
+		}
+
+		@Override
+		public Result filter(LogEvent event) {
+			return this.filter(event == null ? null : event.getLoggerName());
+		}
+
+		private Result filter(String loggerName) {
+			return loggerName != null && loggerName.startsWith("gg.castaway.pufferfish.sentry") ? Result.DENY
+					: Result.NEUTRAL;
+		}
+
+	}
+}
diff --git a/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java b/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..b011abbeb80b42de6be3785e47c7ba3c0f6dc161
--- /dev/null
+++ b/src/main/java/gg/pufferfish/pufferfish/sentry/SentryManager.java
@@ -0,0 +1,40 @@
+package gg.pufferfish.pufferfish.sentry;
+
+import gg.pufferfish.pufferfish.PufferfishConfig;
+import io.sentry.Sentry;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class SentryManager {
+
+	private static final Logger logger = LogManager.getLogger(SentryManager.class);
+
+	private SentryManager() {
+
+	}
+
+	private static boolean initialized = false;
+
+	public static synchronized void init() {
+		if (initialized) {
+			return;
+		}
+		try {
+			initialized = true;
+
+			Sentry.init(options -> {
+				options.setDsn(PufferfishConfig.sentryDsn);
+				options.setMaxBreadcrumbs(100);
+			});
+
+			PufferfishSentryAppender appender = new PufferfishSentryAppender();
+			appender.start();
+			((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).addAppender(appender);
+			logger.info("Sentry logging started!");
+		} catch (Exception e) {
+			logger.warn("Failed to initialize sentry!", e);
+			initialized = false;
+		}
+	}
+
+}
