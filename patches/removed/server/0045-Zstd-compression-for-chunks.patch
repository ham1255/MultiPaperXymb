From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Wed, 16 Nov 2022 01:13:07 +0100
Subject: [PATCH] Zstd compression for chunks.


diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 2929b1f87a70db784240bb8640092938e36dc0fb..d6128e23935e1ec8773678a9116c5f0aec17a2d8 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -1,5 +1,7 @@
 package puregero.multipaper;
 
+import com.github.luben.zstd.Zstd;
+import com.github.luben.zstd.ZstdInputStream;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -353,7 +355,17 @@ public class MultiPaper {
                 }
                 return future;
             } else if (message instanceof DataMessageReply dataMessageReply) {
-                return CompletableFuture.completedFuture(dataMessageReply.data.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(dataMessageReply.data))));
+                if (dataMessageReply.compressionType == DataMessageReply.COMPRESSION_DEFLATE) {
+                    return CompletableFuture.completedFuture(dataMessageReply.data.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(dataMessageReply.data))));
+                } else if (dataMessageReply.compressionType == DataMessageReply.COMPRESSION_ZSTD) {
+                    try {
+                        return CompletableFuture.completedFuture(dataMessageReply.data.length == 0 ? null : new DataInputStream(new ZstdInputStream(new ByteArrayInputStream(dataMessageReply.data))));
+                    } catch (IOException ex) {
+                        throw new IllegalArgumentException("Cannot load " + path + " - IOException");
+                    }
+                } else {
+                    throw new IllegalArgumentException("Cannot load " + path + " - incorrect compression");
+                }
             } else {
                 throw new IllegalArgumentException("Unexpected message reply " + message);
             }
@@ -372,15 +384,28 @@ public class MultiPaper {
     }
 
     public static void writeRegionFile(String world, String path, int cx, int cz, byte[] bytes) throws IOException {
-        if (bytes.length > 0) {
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            DeflaterOutputStream deflateOut = new DeflaterOutputStream(baos);
-            deflateOut.write(bytes);
-            deflateOut.close();
-            bytes = baos.toByteArray();
+        int uncompressedLength = bytes.length;
+        if (getConnection().chunkCompression == WriteChunkMessage.COMPRESSION_DEFLATE) {
+            if (bytes.length > 0) {
+                ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                DeflaterOutputStream deflateOut = new DeflaterOutputStream(baos);
+                deflateOut.write(bytes);
+                deflateOut.close();
+                bytes = baos.toByteArray();
+            }
+            getConnection().send(new WriteChunkMessage(world, path, cx, cz, bytes, WriteChunkMessage.COMPRESSION_DEFLATE, uncompressedLength));
+        } else if (getConnection().chunkCompression == WriteChunkMessage.COMPRESSION_ZSTD) {
+            if (bytes.length > 0) {
+                final byte COMPRESSION_LEVEL = 1;
+
+                byte[] compressed = new byte[(int)Zstd.compressBound(bytes.length)];
+                long compressedLength = Zstd.compress(compressed, bytes, COMPRESSION_LEVEL, false);
+                bytes = new byte[(int)compressedLength];
+                for(int j = 0 ; j < compressedLength ; j++)
+                    bytes[j] = compressed[j];
+            }
+            getConnection().send(new WriteChunkMessage(world, path, cx, cz, bytes, WriteChunkMessage.COMPRESSION_ZSTD, uncompressedLength));
         }
-
-        getConnection().send(new WriteChunkMessage(world, path, cx, cz, bytes), message -> { /* Do nothing */ });
     }
  
     public static CompoundTag readRegionFileNBT(File path, ChunkPos chunkPos) throws IOException {
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index e91f6c5c2e5880d8761a064f899b82ec1419ac05..deee664d3270439565c4c689156d8f52c1f573c3 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -64,6 +64,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
     private final Set<MasterBoundMessage> unhandledRequests = ConcurrentHashMap.newKeySet();
     private final Map<String, ExternalServer> serversMap = new ConcurrentHashMap<>();
     public String secret;
+    public byte chunkCompression;
     public Map<String, byte[]> dataCache = Maps.newHashMap();
     public int port = -1;
 
@@ -218,6 +219,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
     @Override
     public void handle(SetSecretMessage message) {
         secret = message.secret;
+        chunkCompression = message.chunkCompression;
     }
 
     @Override
