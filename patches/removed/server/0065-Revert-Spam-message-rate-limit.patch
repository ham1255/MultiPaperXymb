From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Fri, 2 Dec 2022 01:51:00 +0100
Subject: [PATCH] Revert "Spam message rate limit."

This reverts commit c1e24d0c1aeb2f41a8522a355f86e7dc39045431.

diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index b5404f34ff4e314134ac7d733a9682df7aceb55c..3ff3a1c38857da87740e9aa1de845a1dc300816f 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -394,8 +394,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.add(server);
-            } else if (System.nanoTime() - AddEntitySubscriberMessageThrottle > MESSAGE_RATE_LIMIT) {
-                AddEntitySubscriberMessageThrottle = System.nanoTime();
+            } else {
                 LOGGER.warn("Received an entities subscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
@@ -421,18 +420,12 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.remove(server);
-            } else if (System.nanoTime() - RemoveEntitySubscriberMessageThrottle > MESSAGE_RATE_LIMIT) {
-                RemoveEntitySubscriberMessageThrottle = System.nanoTime();
+            } else {
                 LOGGER.warn("Received an entities unsubscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
     }
 
-    final long MESSAGE_RATE_LIMIT = 2000000000;
-    static long EntitySubscribersSyncMessageThrottle = 0;
-    static long RemoveEntitySubscriberMessageThrottle = 0;
-    static long AddEntitySubscriberMessageThrottle = 0;
-
     @Override
     public void handle(EntitySubscribersSyncMessage message) {
         HashSet<ExternalServer> servers = new HashSet<>();
@@ -445,8 +438,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.clear();
                 levelChunk.externalEntitiesSubscribers.addAll(servers);
-            } else if (System.nanoTime() - EntitySubscribersSyncMessageThrottle > MESSAGE_RATE_LIMIT) {
-                EntitySubscribersSyncMessageThrottle = System.nanoTime();
+            } else {
                 LOGGER.warn("Received an entities subscribe sync notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
