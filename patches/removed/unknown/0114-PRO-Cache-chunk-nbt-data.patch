From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 13 Jan 2022 22:30:31 +1000
Subject: [PATCH] PRO Cache chunk nbt data


diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 5121d1b4c5f1c463666a44a3b2290468a49a4025..e5d34d8213d7fde93bdd1a504cbc854cfbbb7eaa 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -503,7 +503,7 @@ public class ChunkHolder {
                         // Minecraft will apply the chunks tick lists to the world once the chunk got loaded, and then store the tick
                         // lists again inside the chunk once the chunk becomes inaccessible and set the chunk's needsSaving flag.
                         // These actions may however happen deferred, so we manually set the needsSaving flag already here.
-                        chunk.setUnsaved(true);
+                        // chunk.setUnsaved(true); // MultiPaper - not convinced ^
                         chunk.unloadCallback();
                     });
                 }
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 7e8ba7c388644a3892fd518a8742e429840b7d4a..bdf0b510ea6dc1d34232a8f30a4575d50a329bb2 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -13,6 +13,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.ChunkSource;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.storage.LevelData;
@@ -41,11 +42,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
@@ -53,11 +56,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     LevelTickAccess<Fluid> getFluidTicks();
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index e44120e0aaf3513f2b0f72658b8919f88f4f3cec..1adf2a0a1d60e742f622dd013f56e5390fbc616b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -67,6 +67,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     @Nullable
     protected NoiseChunk noiseChunk;
     protected final UpgradeData upgradeData;
+    @Nullable public CompoundTag cachedChunkData; // MultiPaper
     @Nullable
     protected BlendingData blendingData;
     public final Map<Heightmap.Types, Heightmap> heightmaps = Maps.newEnumMap(Heightmap.Types.class);
@@ -311,6 +312,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     public void setUnsaved(boolean shouldSave) {
         this.unsaved = shouldSave;
         if (!shouldSave) this.persistentDataContainer.dirty(false); // CraftBukkit - SPIGOT-6814: chunk was saved, pdc is no longer dirty
+        if (shouldSave) cachedChunkData = null;
     }
 
     public boolean isUnsaved() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 56ab766f1c0c2ba66eab2687a99f49da65f8ff88..7241cd1f53f0b4b8cd33786b91811534802ff6c1 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -597,7 +597,7 @@ public class LevelChunk extends ChunkAccess {
                         }
                     }
 
-                    this.unsaved = true;
+                    setUnsaved(true); // MultiPaper
                     return iblockdata1;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 9cc574749f1e601a1c9ebee1b49a1a22ac0b15b7..1dc2a22da8151ac3c8b9a95f20add6b4dfff9e41 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -372,6 +372,10 @@ public class ChunkSerializer {
 
         ((ChunkAccess) object).setAllStarts(ChunkSerializer.unpackStructureStart(StructurePieceSerializationContext.fromLevel(world), nbttagcompound3, world.getSeed()));
         ((ChunkAccess) object).setAllReferences(ChunkSerializer.unpackStructureReferences(chunkPos, nbttagcompound3));
+
+        ((ChunkAccess) object).setUnsaved(false); // MultiPaper - No point saving something that we just loaded
+        ((ChunkAccess) object).cachedChunkData = nbt; // MultiPaper
+
         if (nbt.getBoolean("shouldSave")) {
             ((ChunkAccess) object).setUnsaved(true);
         }
@@ -505,6 +509,7 @@ public class ChunkSerializer {
     }
     public static CompoundTag saveChunk(ServerLevel world, ChunkAccess chunk, @org.checkerframework.checker.nullness.qual.Nullable AsyncSaveData asyncsavedata) {
         // Paper end
+        if (chunk.cachedChunkData != null) return chunk.cachedChunkData; // MultiPaper
         // Paper start - rewrite light impl
         final int minSection = io.papermc.paper.util.WorldUtil.getMinLightSection(world);
         final int maxSection = io.papermc.paper.util.WorldUtil.getMaxLightSection(world);
@@ -694,6 +699,7 @@ public class ChunkSerializer {
             nbttagcompound.put("ChunkBukkitValues", chunk.persistentDataContainer.toTagCompound());
         }
         // CraftBukkit end
+        chunk.cachedChunkData = nbttagcompound; // MultiPaper
         return nbttagcompound;
     }
 
