From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 22 Jan 2022 21:14:21 +1000
Subject: [PATCH] PRO Pool commonly used objects


diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 14610e6144ec144ebbec6fb0945c67bb0ea86795..138c16fa63b4bb8e2530d387c952c4f25c519028 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -18,6 +18,7 @@ import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaperTemporaryObjectPool;
 
 @Immutable
 public class BlockPos extends Vec3i {
@@ -41,6 +42,22 @@ public class BlockPos extends Vec3i {
     private static final int X_OFFSET = 38;
     // Paper end
 
+    // MultiPaper start - Pool BlockPos
+    private static final MultiPaperTemporaryObjectPool<BlockPos> pool = new MultiPaperTemporaryObjectPool<>(65536, () -> new BlockPos(0, 0, 0));
+
+    public static BlockPos tempObject(int x, int y, int z) {
+        BlockPos blockPos = pool.get();
+        blockPos.x = x;
+        blockPos.y = y;
+        blockPos.z = z;
+        return blockPos;
+    }
+
+    public static BlockPos tempObject(double x, double y, double z) {
+        return tempObject(Mth.floor(x), Mth.floor(y), Mth.floor(z));
+    }
+    // MultiPaper end
+
     public BlockPos(int x, int y, int z) {
         super(x, y, z);
     }
@@ -100,12 +117,12 @@ public class BlockPos extends Vec3i {
 
     @Override
     public BlockPos offset(double d, double e, double f) {
-        return d == 0.0D && e == 0.0D && f == 0.0D ? this : new BlockPos((double)this.getX() + d, (double)this.getY() + e, (double)this.getZ() + f);
+        return d == 0.0D && e == 0.0D && f == 0.0D ? this : BlockPos.tempObject((double)this.getX() + d, (double)this.getY() + e, (double)this.getZ() + f);
     }
 
     @Override
     public BlockPos offset(int i, int j, int k) {
-        return i == 0 && j == 0 && k == 0 ? this : new BlockPos(this.getX() + i, this.getY() + j, this.getZ() + k);
+        return i == 0 && j == 0 && k == 0 ? this : BlockPos.tempObject(this.getX() + i, this.getY() + j, this.getZ() + k);
     }
 
     @Override
@@ -123,68 +140,68 @@ public class BlockPos extends Vec3i {
         if (i == 1) {
             return this;
         } else {
-            return i == 0 ? ZERO : new BlockPos(this.getX() * i, this.getY() * i, this.getZ() * i);
+            return i == 0 ? ZERO : BlockPos.tempObject(this.getX() * i, this.getY() * i, this.getZ() * i);
         }
     }
 
     @Override
     public BlockPos above() {
-        return new BlockPos(this.getX(), this.getY() + 1, this.getZ()); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX(), this.getY() + 1, this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos above(int distance) {
-        return distance == 0 ? this : new BlockPos(this.getX(), this.getY() + distance, this.getZ()); // Paper - Optimize BlockPosition
+        return distance == 0 ? this : BlockPos.tempObject(this.getX(), this.getY() + distance, this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos below() {
-        return new BlockPos(this.getX(), this.getY() - 1, this.getZ()); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX(), this.getY() - 1, this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos below(int i) {
-        return i == 0 ? this : new BlockPos(this.getX(), this.getY() - i, this.getZ()); // Paper - Optimize BlockPosition
+        return i == 0 ? this : BlockPos.tempObject(this.getX(), this.getY() - i, this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos north() {
-        return new BlockPos(this.getX(), this.getY(), this.getZ() - 1); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX(), this.getY(), this.getZ() - 1); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos north(int distance) {
-        return distance == 0 ? this : new BlockPos(this.getX(), this.getY(), this.getZ() - distance); // Paper - Optimize BlockPosition
+        return distance == 0 ? this : BlockPos.tempObject(this.getX(), this.getY(), this.getZ() - distance); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos south() {
-        return new BlockPos(this.getX(), this.getY(), this.getZ() + 1); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX(), this.getY(), this.getZ() + 1); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos south(int distance) {
-        return distance == 0 ? this : new BlockPos(this.getX(), this.getY(), this.getZ() + distance); // Paper - Optimize BlockPosition
+        return distance == 0 ? this : BlockPos.tempObject(this.getX(), this.getY(), this.getZ() + distance); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos west() {
-        return new BlockPos(this.getX() - 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX() - 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos west(int distance) {
-        return distance == 0 ? this : new BlockPos(this.getX() - distance, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return distance == 0 ? this : BlockPos.tempObject(this.getX() - distance, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos east() {
-        return new BlockPos(this.getX() + 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return BlockPos.tempObject(this.getX() + 1, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
     public BlockPos east(int distance) {
-        return distance == 0 ? this : new BlockPos(this.getX() + distance, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
+        return distance == 0 ? this : BlockPos.tempObject(this.getX() + distance, this.getY(), this.getZ()); // Paper - Optimize BlockPosition
     }
 
     @Override
@@ -192,26 +209,26 @@ public class BlockPos extends Vec3i {
         // Paper Start - Optimize BlockPosition
         switch(direction) {
             case UP:
-                return new BlockPos(this.getX(), this.getY() + 1, this.getZ());
+                return BlockPos.tempObject(this.getX(), this.getY() + 1, this.getZ());
             case DOWN:
-                return new BlockPos(this.getX(), this.getY() - 1, this.getZ());
+                return BlockPos.tempObject(this.getX(), this.getY() - 1, this.getZ());
             case NORTH:
-                return new BlockPos(this.getX(), this.getY(), this.getZ() - 1);
+                return BlockPos.tempObject(this.getX(), this.getY(), this.getZ() - 1);
             case SOUTH:
-                return new BlockPos(this.getX(), this.getY(), this.getZ() + 1);
+                return BlockPos.tempObject(this.getX(), this.getY(), this.getZ() + 1);
             case WEST:
-                return new BlockPos(this.getX() - 1, this.getY(), this.getZ());
+                return BlockPos.tempObject(this.getX() - 1, this.getY(), this.getZ());
             case EAST:
-                return new BlockPos(this.getX() + 1, this.getY(), this.getZ());
+                return BlockPos.tempObject(this.getX() + 1, this.getY(), this.getZ());
             default:
-        return new BlockPos(this.getX() + direction.getStepX(), this.getY() + direction.getStepY(), this.getZ() + direction.getStepZ());
+        return BlockPos.tempObject(this.getX() + direction.getStepX(), this.getY() + direction.getStepY(), this.getZ() + direction.getStepZ());
         }
         // Paper End
     }
 
     @Override
     public BlockPos relative(Direction direction, int i) {
-        return i == 0 ? this : new BlockPos(this.getX() + direction.getStepX() * i, this.getY() + direction.getStepY() * i, this.getZ() + direction.getStepZ() * i);
+        return i == 0 ? this : BlockPos.tempObject(this.getX() + direction.getStepX() * i, this.getY() + direction.getStepY() * i, this.getZ() + direction.getStepZ() * i);
     }
 
     @Override
@@ -222,7 +239,7 @@ public class BlockPos extends Vec3i {
             int j = axis == Direction.Axis.X ? i : 0;
             int k = axis == Direction.Axis.Y ? i : 0;
             int l = axis == Direction.Axis.Z ? i : 0;
-            return new BlockPos(this.getX() + j, this.getY() + k, this.getZ() + l);
+            return BlockPos.tempObject(this.getX() + j, this.getY() + k, this.getZ() + l);
         }
     }
 
@@ -232,21 +249,21 @@ public class BlockPos extends Vec3i {
         default:
             return this;
         case CLOCKWISE_90:
-            return new BlockPos(-this.getZ(), this.getY(), this.getX());
+            return BlockPos.tempObject(-this.getZ(), this.getY(), this.getX());
         case CLOCKWISE_180:
-            return new BlockPos(-this.getX(), this.getY(), -this.getZ());
+            return BlockPos.tempObject(-this.getX(), this.getY(), -this.getZ());
         case COUNTERCLOCKWISE_90:
-            return new BlockPos(this.getZ(), this.getY(), -this.getX());
+            return BlockPos.tempObject(this.getZ(), this.getY(), -this.getX());
         }
     }
 
     @Override
     public BlockPos cross(Vec3i pos) {
-        return new BlockPos(this.getY() * pos.getZ() - this.getZ() * pos.getY(), this.getZ() * pos.getX() - this.getX() * pos.getZ(), this.getX() * pos.getY() - this.getY() * pos.getX());
+        return BlockPos.tempObject(this.getY() * pos.getZ() - this.getZ() * pos.getY(), this.getZ() * pos.getX() - this.getX() * pos.getZ(), this.getX() * pos.getY() - this.getY() * pos.getX());
     }
 
     public BlockPos atY(int y) {
-        return new BlockPos(this.getX(), y, this.getZ());
+        return BlockPos.tempObject(this.getX(), y, this.getZ());
     }
 
     public BlockPos immutable() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 27249e670e29b2aa2cdbf2a27eb956ea8a1bbb84..5252ba5ac17a268507e9ed873389211faa0e354f 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1196,7 +1196,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
         int i = Mth.floor(this.position.x);
         int j = Mth.floor(this.position.y - 0.20000000298023224D);
         int k = Mth.floor(this.position.z);
-        BlockPos blockposition = new BlockPos(i, j, k);
+        BlockPos blockposition = BlockPos.tempObject(i, j, k);
 
         if (this.level.getBlockState(blockposition).isAir()) {
             BlockPos blockposition1 = blockposition.below();
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 52d16628e10f2f436a38aebae2a97df108273ed9..3a96f4328bd955410c347de1e68afff6100c2362 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -700,7 +700,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     @Nullable
     private static Container getContainerAt(Level world, double x, double y, double z, boolean optimizeEntities) {
         Object object = null;
-        BlockPos blockposition = new BlockPos(x, y, z);
+        BlockPos blockposition = BlockPos.tempObject(x, y, z);
         if ( !world.hasChunkAt( blockposition ) ) return null; // Spigot
         BlockState iblockdata = world.getBlockState(blockposition);
         Block block = iblockdata.getBlock();
diff --git a/src/main/java/puregero/multipaper/MultiPaperTemporaryObjectPool.java b/src/main/java/puregero/multipaper/MultiPaperTemporaryObjectPool.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ba1a5f69e7e4a5aa426e771edd5396c7de86e3e
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperTemporaryObjectPool.java
@@ -0,0 +1,61 @@
+package puregero.multipaper;
+
+import org.apache.logging.log4j.LogManager;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.Supplier;
+
+/**
+ * Probably thread-safe
+ *
+ * @author PureGero
+ */
+public class MultiPaperTemporaryObjectPool <T> {
+    private final AtomicInteger index = new AtomicInteger(0);
+    private final int expireTimeMillis;
+    private final Supplier<T> initialiser;
+    private long lastLoop = System.currentTimeMillis();
+    private T[] objects;
+
+    public MultiPaperTemporaryObjectPool(int size, Supplier<T> initialiser) {
+        this(size, 1000, initialiser);
+    }
+
+    public MultiPaperTemporaryObjectPool(int size, int expireTimeMillis, Supplier<T> initialiser) {
+        this.expireTimeMillis = expireTimeMillis;
+        this.initialiser = initialiser;
+        this.expandTo(size);
+    }
+
+    private void expandTo(int size) {
+        Object[] oldObjects = this.objects;
+
+        // Don't copy old objects over as they may not have expired yet
+
+        this.objects = (T[]) new Object[size];
+
+        if (oldObjects != null && oldObjects[0] != null) {
+            LogManager.getLogger().info("Expanding pool of " + oldObjects[0].getClass().getSimpleName() + " to " + size);
+        }
+    }
+
+    public T get() {
+        int myIndex = index.getAndIncrement() & (objects.length - 1);
+
+        if (myIndex == 0) {
+            if (lastLoop > System.currentTimeMillis() - expireTimeMillis) {
+                expandTo(objects.length << 1);
+            }
+
+            lastLoop = System.currentTimeMillis();
+        }
+
+        T t = objects[myIndex];
+
+        if (t == null) {
+            return objects[myIndex] = initialiser.get();
+        }
+
+        return t;
+    }
+}
