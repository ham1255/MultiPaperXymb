From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 21 Jan 2022 20:59:46 +1000
Subject: [PATCH] PRO Use multithreaded region file IO


diff --git a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
index a630a84b60b4517e3bc330d4983b914bd064efa4..eaf0a747b78f23ad75e6416ab629ac0a202fb648 100644
--- a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
+++ b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
@@ -6,6 +6,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.RegionFile;
 import org.apache.logging.log4j.Logger;
+import puregero.multipaper.MultiPaperExecutor;
 
 import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
@@ -35,7 +36,7 @@ import java.util.function.Function;
  * @see #scheduleSave(ServerLevel, int, int, CompoundTag, CompoundTag, int)
  * @see #loadChunkDataAsync(ServerLevel, int, int, int, Consumer, boolean, boolean, boolean)
  */
-public final class PaperFileIOThread extends QueueExecutorThread {
+public final class PaperFileIOThread { // MultiPaper - use a pool of executors
 
     public static final Logger LOGGER = MinecraftServer.LOGGER;
     public static final CompoundTag FAILURE_VALUE = new CompoundTag();
@@ -45,19 +46,78 @@ public final class PaperFileIOThread extends QueueExecutorThread {
         public static final PaperFileIOThread INSTANCE = new PaperFileIOThread();
 
         static {
-            INSTANCE.start();
+            // INSTANCE.start(); // MultiPaper - not needed
         }
     }
 
     private final AtomicLong writeCounter = new AtomicLong();
 
+    // Multipaper start
+    private final MultiPaperExecutor[] readExecutors = new MultiPaperExecutor[7];
+    private final MultiPaperExecutor[] writeExecutors = new MultiPaperExecutor[1];
+    private void queueTask(ChunkDataTask newTask) {
+        int smallestQueueSize = Integer.MAX_VALUE;
+        MultiPaperExecutor smallestQueue = null;
+
+        // Give write tasks their own dedicated thread
+        MultiPaperExecutor[] executors = newTask.inProgressWrite == null ? readExecutors : writeExecutors;
+
+        for (MultiPaperExecutor executor : executors ) {
+            int queueSize = executor.getQueueLength();
+
+            if (queueSize == 0) {
+                executor.execute(newTask);
+                return;
+            }
+
+            if (queueSize < smallestQueueSize) {
+                smallestQueue = executor;
+                smallestQueueSize = queueSize;
+            }
+        }
+
+        smallestQueue.execute(newTask);
+    }
+
+    public void flush() {
+        // Do nothing
+    }
+
+    public void close(boolean b, boolean b1) {
+        for (MultiPaperExecutor[] executors : new MultiPaperExecutor[][] { readExecutors, writeExecutors }) {
+            for (MultiPaperExecutor executor : executors) {
+                executor.shutdown();
+            }
+        }
+    }
+
+    public boolean isCurrentThread() {
+        Thread currentThread = Thread.currentThread();
+        for (MultiPaperExecutor[] executors : new MultiPaperExecutor[][] { readExecutors, writeExecutors }) {
+            for (MultiPaperExecutor executor : executors) {
+                if (executor == currentThread) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+    // MultiPaper end
+
     private PaperFileIOThread() {
-        super(new PrioritizedTaskQueue<>(), (int)(1.0e6)); // 1.0ms spinwait time
-        this.setName("Paper RegionFile IO Thread");
-        this.setPriority(Thread.NORM_PRIORITY - 1); // we keep priority close to normal because threads can wait on us
-        this.setUncaughtExceptionHandler((final Thread unused, final Throwable thr) -> {
-            LOGGER.fatal("Uncaught exception thrown from IO thread, report this!", thr);
-        });
+        // MultiPaper start
+        for (MultiPaperExecutor[] executors : new MultiPaperExecutor[][] { readExecutors, writeExecutors }) {
+            for (int i = 0; i < executors.length; i++) {
+                executors[i] = new MultiPaperExecutor();
+                executors[i].setName("Paper RegionFile IO Thread");
+                executors[i].setPriority(Thread.NORM_PRIORITY - 1); // we keep priority close to normal because threads can wait on us
+                executors[i].setUncaughtExceptionHandler((final Thread unused, final Throwable thr) -> {
+                    LOGGER.fatal("Uncaught exception thrown from IO thread, report this!", thr);
+                });
+            }
+        }
+        // MultiPaper end
     }
 
     /* run() is implemented by superclass */
@@ -391,7 +451,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * </p>
      */
     public void runTask(final int priority, final Runnable runnable) {
-        this.queueTask(new GeneralTask(priority, runnable));
+        throw new UnsupportedOperationException(); // this.queueTask(new GeneralTask(priority, runnable)); // MultiPaper - Unused method
     }
 
     static final class GeneralTask extends PrioritizedTaskQueue.PrioritizedTask implements Runnable {
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 937ba63e5f47e300ede06ee8f438e9f48c437437..9a0595fe335d6a1f1cc22c1f569f3fdfc28ff406 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1661,7 +1661,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     @Nullable
     @Override
     public CompoundTag read(ChunkPos chunkcoordintpair) throws IOException {
-        if (Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+        if (!com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.isCurrentThread()) { // MultiPaper
             CompoundTag ret = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
                 .loadChunkDataAsyncFuture(this.level, chunkcoordintpair.x, chunkcoordintpair.z, com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread(),
                     false, true, true).join().chunkData;
@@ -1677,7 +1677,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     @Override
     public void write(ChunkPos chunkcoordintpair, CompoundTag nbttagcompound) throws IOException {
-        if (Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+        if (!com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.isCurrentThread()) { // MultiPaper
             com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(
                 this.level, chunkcoordintpair.x, chunkcoordintpair.z, null, nbttagcompound,
                 com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread());
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 524b78e4468a6cbdd445d245afaf907caf6c25f8..91a108c51e0020c28b83200d55ecdf3bdb585a4e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -438,7 +438,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     @javax.annotation.Nullable
     @Override
     public net.minecraft.nbt.CompoundTag read(ChunkPos chunkcoordintpair) throws java.io.IOException {
-        if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+        if (this.world != null && !com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.isCurrentThread()) { // MultiPaper
             // MultiPaper start - don't block the main thread, run tasks in the meantime
             CompletableFuture<PaperFileIOThread.ChunkData> completablefuture = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
                 .loadChunkDataAsyncFuture(this.world, chunkcoordintpair.x, chunkcoordintpair.z, com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread(),
@@ -460,7 +460,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
 
     @Override
     public void write(ChunkPos chunkcoordintpair, net.minecraft.nbt.CompoundTag nbttagcompound) throws java.io.IOException {
-        if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+        if (this.world != null && !com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.isCurrentThread()) { // MultiPaper
             com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(
                 this.world, chunkcoordintpair.x, chunkcoordintpair.z, nbttagcompound, null,
                 com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread());
diff --git a/src/main/java/puregero/multipaper/MultiPaperExecutor.java b/src/main/java/puregero/multipaper/MultiPaperExecutor.java
index e5de22d014b37311e2fd07e5c509b46a11885c2d..8a2f023c850eb49177bbd0d98c9e31277380cd48 100644
--- a/src/main/java/puregero/multipaper/MultiPaperExecutor.java
+++ b/src/main/java/puregero/multipaper/MultiPaperExecutor.java
@@ -26,6 +26,10 @@ public class MultiPaperExecutor extends Thread implements ExecutorService {
         start();
     }
 
+    public int getQueueLength() {
+        return queue.size();
+    }
+
     @Override
     public void execute(@NotNull Runnable command) {
         queue.add(command);
