From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Fri, 2 Dec 2022 01:50:53 +0100
Subject: [PATCH] Revert "Supress spam messages."

This reverts commit 72536324fefe718d3715214b3a32b3c66d31d96f.

diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 439b71faf18c4b13ed25e075a6b707effdbc956a..ca81c3b396a303fda8eef8b8c1ea106ffecfc807 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -61,7 +61,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
                 })
                 .exceptionallyCompose(exception -> {
                     if (exception instanceof TimeoutException || exception.getCause() instanceof TimeoutException) {
-//                        LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
+                        LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
                         return (CompletionStage) loadAsync(pos); // Cast it away from what we want to get it to compile
                     }
                     return CompletableFuture.failedFuture(exception);
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index ba52ce56136f68190681e6cbfc5175e7a421a4c3..608b28aa26c119f5b2b778ad07e3d7ff7b67a53a 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -381,7 +381,7 @@ public class MultiPaper {
         try {
             return readRegionFileAsync(world, path, cx, cz).get(20, TimeUnit.SECONDS);
         } catch (TimeoutException timeoutException) {
-//            LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
+            LOGGER.warn("Timed out reading " + world + "," + path + "," + cx + "," + cz + ", retrying...");
             return readRegionFile(world, path, cx, cz);
         } catch (Exception e) {
             throw new RuntimeException(e);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
index 52b05810b552b91a04417f2fd485e8ae9b544f66..9c4ff3f43b7bf419805129556a303417f4f9e036 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RequestChunkPacket.java
@@ -137,7 +137,7 @@ public class RequestChunkPacket extends ExternalServerPacket {
         // Timeout instantly if this server is blocking our chunk loading, as this is probably also blocking their chunk loading
         .orTimeout(15, TimeUnit.SECONDS).exceptionally(throwable -> {
             if (throwable instanceof TimeoutException) {
-//                LOGGER.warn("Timed out while sending chunk " + world + "," + cx + "," + cz);
+                LOGGER.warn("Timed out while sending chunk " + world + "," + cx + "," + cz);
             } else {
                 LOGGER.warn("Error while sending chunk " + world + "," + cx + "," + cz, throwable);
             }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
index 3dc39c7333568a765aad4a7db1e6c120d8c26f73..8cbf1361cf46721c5bde0d9a067ea64dbdf47c2d 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
@@ -68,7 +68,7 @@ public class SendChunkPacket extends ExternalServerPacket {
             Consumer<DataInputStream> callback = connection.chunkCallbacks.remove(new ChunkKey(world, cx, cz));
             if (callback != null) {
                 if (data.length == 0) {
-//                    LOGGER.warn(connection.externalServer.getName() + " sent us an empty chunk for " + world + "," + cx + "," + cz + ", force loading it from disk");
+                    LOGGER.warn(connection.externalServer.getName() + " sent us an empty chunk for " + world + "," + cx + "," + cz + ", force loading it from disk");
                     MultiPaper.forceReadChunk(world, "region", cx, cz).thenAccept(data2 -> callback.accept(data2.length == 0 ? null : new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data2)))));
                 } else {
                     callback.accept(new DataInputStream(new ByteArrayInputStream(data)));
