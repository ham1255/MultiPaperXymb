From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Thu, 2 Feb 2023 09:41:26 +0100
Subject: [PATCH] Make a hacky cache for the damn NBT optimization hashes.


diff --git a/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java b/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java
index c007f71fc5b7f36eb6c62b1f265e5cc1169c3ae4..ad1160713a19fa7dc6d9506b7d6cc9da0766e2dc 100644
--- a/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java
+++ b/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java
@@ -69,6 +69,8 @@ public class MultiPaperConfiguration extends ConfigurationPart {
         public boolean disableDolphinSwimToTreasure = false;
         public boolean enderEyeStrongholdFindOptimization = false;
         public boolean disablePlayerBlockSuffocation = false;
+        public boolean enableBackwardsIncompatibleStashOptimization = false;
+        public String backwardsIncompatibleStashOptimizationHashCacheFolder = "";
     }
 
     public SyncSettings syncSettings;
diff --git a/src/main/java/xymb/NBTDeduplicator.java b/src/main/java/xymb/NBTDeduplicator.java
index 8a50fd2c3360e090d0f470a51aa0748a7f62e686..7a5f325377a29c9b3183baf94103877d3b7b8b95 100644
--- a/src/main/java/xymb/NBTDeduplicator.java
+++ b/src/main/java/xymb/NBTDeduplicator.java
@@ -8,20 +8,91 @@ import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.StringTag;
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
+import java.io.DataOutput;
+import java.io.FileOutputStream;
+import java.io.File;
+import net.minecraft.nbt.NbtIo;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import net.openhft.hashing.LongTupleHashFunction;
 import puregero.multipaper.ChunkKey;
+import puregero.multipaper.config.MultiPaperConfiguration;
+import java.lang.Thread;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.io.FileNotFoundException;
+import java.nio.file.StandardCopyOption;
+import java.nio.file.Files;
+import java.io.FileInputStream;
+import net.minecraft.nbt.NbtAccounter;
+import java.io.DataInputStream;
 
 public class NBTDeduplicator {
     Object2ObjectOpenHashMap<Hash128, ListTag> tags = new Object2ObjectOpenHashMap<>();
+    private static ObjectLinkedOpenHashSet<Hash128> savedTags = new ObjectLinkedOpenHashSet<>();
 
     private static NBTDeduplicator instance = null;
+    private static ConcurrentLinkedQueue<Hash128> cacheIncomingHash = new ConcurrentLinkedQueue<>();
+    private static ConcurrentLinkedQueue<ListTag> cacheIncomingListTag = new ConcurrentLinkedQueue<>(); // Why tf Java has no pair?
+    private static Thread thread;
 
     public static NBTDeduplicator instance() {
-        if (instance == null) instance = new NBTDeduplicator();
+        if (instance == null) {
+            instance = new NBTDeduplicator();
+            thread = new Thread(new MainInstanceThread(), "NBTDeduplicator");
+            thread.setPriority(Thread.NORM_PRIORITY);
+            thread.start();
+        }
         return instance;
     }
 
+    static class MainInstanceThread extends Thread { // Yes, a hack. IDGAF, I just want it to work.
+        public void run() {
+            String hashFolder = MultiPaperConfiguration.get().optimizations.backwardsIncompatibleStashOptimizationHashCacheFolder;
+                while (true) {
+                    while (true) {
+                        if (cacheIncomingListTag.isEmpty()) break;
+                        if (cacheIncomingHash.isEmpty()) break;
+
+                        Hash128 hash = cacheIncomingHash.poll();
+                        ListTag tag = cacheIncomingListTag.poll();
+                        if (savedTags.contains(hash)) continue;
+                        savedTags.add(hash);
+                        String hashString = hash.hashString();
+                        String fileName = hashString + ".nbt";
+                        String testFileName = hashString + ".nbt.wip";
+
+                        File filePath = new File(hashFolder, fileName);
+                        if (filePath.exists()) {
+                            System.out.println("New hash to save - " + hashString + " - exists");
+                            continue;
+                        }
+
+                        System.out.println("New hash to save - " + hashString);
+
+                        File tempFilePath = new File(hashFolder, testFileName);
+                        try {
+                            FileOutputStream f = new FileOutputStream(tempFilePath);
+                            DataOutputStream out = new DataOutputStream(f);
+                            CompoundTag compound = new CompoundTag();
+                            compound.putString("hash", hashString);
+                            compound.put("tag", tag);
+                            NbtIo.write(compound, (DataOutput) out);
+                            out.flush();
+                            f.close();
+                            Files.move(tempFilePath.toPath(), filePath.toPath(), StandardCopyOption.REPLACE_EXISTING);
+                        } catch (FileNotFoundException ex) {
+                            System.out.println("ERROR: Can't save hash FileNotFoundException!");
+                        } catch (IOException ex) {
+                            System.out.println("ERROR: Can't save hash IOException!");
+                        }
+                    }
+                try {
+                        Thread.sleep(100);
+                } catch(InterruptedException ex) {}
+            }
+        }
+    }
+
     public static class Hash128 {
         public long lower, upper;
 
@@ -54,6 +125,24 @@ public class NBTDeduplicator {
         }
     }
 
+    void addHash(Hash128 hash, ListTag tag) {
+        synchronized (tags) {
+            if (tags.get(hash) == null) {
+                ListTag copy = tag.copy();
+                tags.put(hash, copy);
+                if (!MultiPaperConfiguration.get().optimizations.backwardsIncompatibleStashOptimizationHashCacheFolder.isEmpty()) {
+                    if (hash == null) {
+                        System.out.println("ERROR! Unknown deduplication hash is NULL");
+                        Thread.dumpStack();
+                    } else {
+                        cacheIncomingHash.add(hash);
+                        cacheIncomingListTag.add(copy);
+                    }
+                }
+            }
+        }
+    }
+
     public void addHash(String hash, ListTag tag) {
         long lower = Long.parseLong(hash.substring(0, 16), 16);
         long upper = Long.parseLong(hash.substring(16, 32), 16);
@@ -62,10 +151,59 @@ public class NBTDeduplicator {
 //            if (!tags.containsKey(new Hash128(lower, upper))) {
 //                System.out.println("Adding hash " + hash);
 //            }
-            tags.put(new Hash128(lower, upper), tag);
+            addHash(new Hash128(lower, upper), tag);
         }
     }
 
+    static boolean first = false;
+
+    ListTag getHash(Hash128 hash) {
+        synchronized (tags) {
+            ListTag deduplicated = tags.get(hash);
+            if (deduplicated != null) return deduplicated;
+
+            String hashFolder = MultiPaperConfiguration.get().optimizations.backwardsIncompatibleStashOptimizationHashCacheFolder;
+            String hashString = hash.hashString();
+            String fileName = hashString + ".nbt";
+            File filePath = new File(hashFolder, fileName);
+            if (!filePath.canRead()) {
+                System.out.println("ERROR! Unknown deduplication hash FAILED TO READ FROM FILE! " + hashString + " " + filePath);
+                return null;
+            }
+            try {
+                DataInputStream dataInputStream = new DataInputStream( new FileInputStream(filePath));
+                CompoundTag nbttagcompound = NbtIo.read(dataInputStream, NbtAccounter.UNLIMITED);
+                System.out.println("Unknown deduplication hash RECOVERED " + hashString);
+                if (first == false) {
+                    Thread.dumpStack();
+                    first = true;
+                }
+                ListTag ret = nbttagcompound.getList("tag", 10);
+                tags.put(hash, ret);
+                return ret;
+            } catch (FileNotFoundException ex) {
+                System.out.println("ERROR: Can't read hash FileNotFoundException!");
+            } catch (IOException ex) {
+                System.out.println("ERROR: Can't read hash IOException!");
+            }
+            return null;
+        }
+    }
+
+    public String addAndGetHex(ListTag tag) {
+        Hash128 hash = hashNBT(tag);
+        ListTag deduplicated;
+
+        synchronized (tags) {
+            deduplicated = tags.get(hash);
+            if (deduplicated == null) {
+                addHash(hash, tag);
+            }
+        }
+
+        return hash.hashString();
+    }
+
     public Hash128 hashNBT(ListTag tag) {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         try {
@@ -114,26 +252,12 @@ public class NBTDeduplicator {
         Hash128 hash = hashFromLU(lower, upper);
         ListTag deduplicated;
         synchronized (tags) {
-            deduplicated = tags.get(hash);
+            deduplicated = getHash(hash);
         }
         if (deduplicated == null) return deduplicated;
         return deduplicated.copy();
     }
 
-    public String addAndGetHex(ListTag tag) {
-        Hash128 hash = hashNBT(tag);
-        ListTag deduplicated;
-
-        synchronized (tags) {
-            deduplicated = tags.get(hash);
-            if (deduplicated == null) {
-                tags.put(hash, tag.copy());
-            }
-        }
-
-        return hash.hashString();
-    }
-
     public ListTag makePalette() {
         var list = new ListTag();
         int i = 0;
@@ -173,6 +297,8 @@ public class NBTDeduplicator {
     }
 
     public static void deduplicateContainersOnChunkRead(CompoundTag nbt, ChunkKey key) {
+        if (MultiPaperConfiguration.get().optimizations.enableBackwardsIncompatibleStashOptimization == false) return;
+
         int regionVersion = nbt.getInt("DataVersion");
         if (regionVersion < 3120) return; // 1.19.2
 
@@ -230,6 +356,7 @@ public class NBTDeduplicator {
     }
 
     public static void deduplicateContainersOnWrite(CompoundTag nbt) {
+        if (MultiPaperConfiguration.get().optimizations.enableBackwardsIncompatibleStashOptimization == false) return;
         if (nbt == null) return;
 //        System.out.println("Deduplicate!");
         int hash = 0;
