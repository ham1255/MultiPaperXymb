From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Sat, 22 Oct 2022 23:04:26 +0200
Subject: [PATCH] Spam message rate limit.


diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 0df8bf5fc143c0642b007c117987d5e319efdddd..f5490f6edb40d6d1c2449fd0a269bc1d09b861a0 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -371,7 +371,8 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.add(server);
-            } else {
+            } else if (System.nanoTime() - AddEntitySubscriberMessageThrottle > MESSAGE_RATE_LIMIT) {
+                AddEntitySubscriberMessageThrottle = System.nanoTime();
                 LOGGER.warn("Received an entities subscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
@@ -397,12 +398,18 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             ChunkAccess chunk = MultiPaper.getChunkAccess(message.world, message.cx, message.cz);
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.remove(server);
-            } else {
+            } else if (System.nanoTime() - RemoveEntitySubscriberMessageThrottle > MESSAGE_RATE_LIMIT) {
+                RemoveEntitySubscriberMessageThrottle = System.nanoTime();
                 LOGGER.warn("Received an entities unsubscribe notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
     }
 
+    final long MESSAGE_RATE_LIMIT = 2000000000;
+    static long EntitySubscribersSyncMessageThrottle = 0;
+    static long RemoveEntitySubscriberMessageThrottle = 0;
+    static long AddEntitySubscriberMessageThrottle = 0;
+
     @Override
     public void handle(EntitySubscribersSyncMessage message) {
         HashSet<ExternalServer> servers = new HashSet<>();
@@ -415,7 +422,8 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.externalEntitiesSubscribers.clear();
                 levelChunk.externalEntitiesSubscribers.addAll(servers);
-            } else {
+            } else if (System.nanoTime() - EntitySubscribersSyncMessageThrottle > MESSAGE_RATE_LIMIT) {
+                EntitySubscribersSyncMessageThrottle = System.nanoTime();
                 LOGGER.warn("Received an entities subscribe sync notification for an unloaded chunk " + message.world + ";" + message.cx + ";" + message.cz);
             }
         });
