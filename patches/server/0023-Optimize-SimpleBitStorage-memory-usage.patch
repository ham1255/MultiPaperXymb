From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Wed, 26 Oct 2022 16:29:26 +0200
Subject: [PATCH] Optimize SimpleBitStorage memory usage.


diff --git a/src/main/java/net/minecraft/util/SimpleBitStorage.java b/src/main/java/net/minecraft/util/SimpleBitStorage.java
index 36e33923bf48e56c743ed043bcbc66bc32f0422f..939485e14fcb1aee96e84e5f030081347bd67367 100644
--- a/src/main/java/net/minecraft/util/SimpleBitStorage.java
+++ b/src/main/java/net/minecraft/util/SimpleBitStorage.java
@@ -6,14 +6,18 @@ import org.apache.commons.lang3.Validate;
 
 public class SimpleBitStorage implements BitStorage {
     private static final int[] MAGIC = new int[]{-1, -1, 0, Integer.MIN_VALUE, 0, 0, 1431655765, 1431655765, 0, Integer.MIN_VALUE, 0, 1, 858993459, 858993459, 0, 715827882, 715827882, 0, 613566756, 613566756, 0, Integer.MIN_VALUE, 0, 2, 477218588, 477218588, 0, 429496729, 429496729, 0, 390451572, 390451572, 0, 357913941, 357913941, 0, 330382099, 330382099, 0, 306783378, 306783378, 0, 286331153, 286331153, 0, Integer.MIN_VALUE, 0, 3, 252645135, 252645135, 0, 238609294, 238609294, 0, 226050910, 226050910, 0, 214748364, 214748364, 0, 204522252, 204522252, 0, 195225786, 195225786, 0, 186737708, 186737708, 0, 178956970, 178956970, 0, 171798691, 171798691, 0, 165191049, 165191049, 0, 159072862, 159072862, 0, 153391689, 153391689, 0, 148102320, 148102320, 0, 143165576, 143165576, 0, 138547332, 138547332, 0, Integer.MIN_VALUE, 0, 4, 130150524, 130150524, 0, 126322567, 126322567, 0, 122713351, 122713351, 0, 119304647, 119304647, 0, 116080197, 116080197, 0, 113025455, 113025455, 0, 110127366, 110127366, 0, 107374182, 107374182, 0, 104755299, 104755299, 0, 102261126, 102261126, 0, 99882960, 99882960, 0, 97612893, 97612893, 0, 95443717, 95443717, 0, 93368854, 93368854, 0, 91382282, 91382282, 0, 89478485, 89478485, 0, 87652393, 87652393, 0, 85899345, 85899345, 0, 84215045, 84215045, 0, 82595524, 82595524, 0, 81037118, 81037118, 0, 79536431, 79536431, 0, 78090314, 78090314, 0, 76695844, 76695844, 0, 75350303, 75350303, 0, 74051160, 74051160, 0, 72796055, 72796055, 0, 71582788, 71582788, 0, 70409299, 70409299, 0, 69273666, 69273666, 0, 68174084, 68174084, 0, Integer.MIN_VALUE, 0, 5};
+    private static final long[] MAGIC_UNSIGNED = new long[MAGIC.length];
+    private static final long[] MASKS = new long[32];
+    private static boolean generated = false;
     private final long[] data;
     private final int bits;
-    private final long mask;
+//    private final long mask;
     private final int size;
     private final int valuesPerLong;
-    private final int divideMul; private final long divideMulUnsigned; // Paper - referenced in b(int) with 2 Integer.toUnsignedLong calls
-    private final int divideAdd; private final long divideAddUnsigned; // Paper
-    private final int divideShift;
+    private final int divideI;
+//    private final int divideMul; private final long divideMulUnsigned; // Paper - referenced in b(int) with 2 Integer.toUnsignedLong calls
+//    private final int divideAdd; private final long divideAddUnsigned; // Paper
+//    private final int divideShift;
 
     public SimpleBitStorage(int elementBits, int size, int[] data) {
         this(elementBits, size);
@@ -25,7 +29,7 @@ public class SimpleBitStorage implements BitStorage {
 
             for(int k = this.valuesPerLong - 1; k >= 0; --k) {
                 l <<= elementBits;
-                l |= (long)data[j + k] & this.mask;
+                l |= (long)data[j + k] & this.MASKS[this.bits];
             }
 
             this.data[i++] = l;
@@ -37,7 +41,7 @@ public class SimpleBitStorage implements BitStorage {
 
             for(int o = m - 1; o >= 0; --o) {
                 n <<= elementBits;
-                n |= (long)data[j + o] & this.mask;
+                n |= (long)data[j + o] & this.MASKS[this.bits];
             }
 
             this.data[i] = n;
@@ -50,15 +54,21 @@ public class SimpleBitStorage implements BitStorage {
     }
 
     public SimpleBitStorage(int elementBits, int size, @Nullable long[] data) {
+        if (generated == false) {
+            for (int i = 0 ; i < MAGIC.length ; i++) MAGIC_UNSIGNED[i] = Integer.toUnsignedLong(MAGIC[i]);
+            for (int i = 1 ; i < 32 ; i++) MASKS[i] = (1L << i) - 1L;
+            generated = true;
+        }
         Validate.inclusiveBetween(1L, 32L, (long)elementBits);
         this.size = size;
         this.bits = elementBits;
-        this.mask = (1L << elementBits) - 1L;
+//        this.mask = (1L << elementBits) - 1L;
         this.valuesPerLong = (char)(64 / elementBits);
         int i = 3 * (this.valuesPerLong - 1);
-        this.divideMul = MAGIC[i + 0]; this.divideMulUnsigned = Integer.toUnsignedLong(this.divideMul); // Paper
-        this.divideAdd = MAGIC[i + 1]; this.divideAddUnsigned = Integer.toUnsignedLong(this.divideAdd); // Paper
-        this.divideShift = MAGIC[i + 2];
+        divideI = i;
+//        this.divideMul = MAGIC[i + 0]; this.divideMulUnsigned = Integer.toUnsignedLong(this.divideMul); // Paper
+//        this.divideAdd = MAGIC[i + 1]; this.divideAddUnsigned = Integer.toUnsignedLong(this.divideAdd); // Paper
+//        this.divideShift = MAGIC[i + 2];
         int j = (size + this.valuesPerLong - 1) / this.valuesPerLong;
         if (data != null) {
             if (data.length != j) {
@@ -75,7 +85,8 @@ public class SimpleBitStorage implements BitStorage {
     private int cellIndex(int index) {
         //long l = Integer.toUnsignedLong(this.divideMul); // Paper
         //long m = Integer.toUnsignedLong(this.divideAdd); // Paper
-        return (int) ((long) index * this.divideMulUnsigned + this.divideAddUnsigned >> 32 >> this.divideShift); // Paper
+//        return (int) ((long) index * this.divideMulUnsigned + this.divideAddUnsigned >> 32 >> this.divideShift); // Paper
+        return (int) ((long) index * MAGIC_UNSIGNED[divideI + 0] + MAGIC_UNSIGNED[divideI + 1] >> 32 >> MAGIC_UNSIGNED[divideI + 2]); // Paper
     }
 
     @Override
@@ -85,8 +96,8 @@ public class SimpleBitStorage implements BitStorage {
         int i = this.cellIndex(index);
         long l = this.data[i];
         int j = (index - i * this.valuesPerLong) * this.bits;
-        int k = (int)(l >> j & this.mask);
-        this.data[i] = l & ~(this.mask << j) | ((long)value & this.mask) << j;
+        int k = (int)(l >> j & this.MASKS[this.bits]);
+        this.data[i] = l & ~(this.MASKS[this.bits] << j) | ((long)value & this.MASKS[this.bits]) << j;
         return k;
     }
 
@@ -97,7 +108,7 @@ public class SimpleBitStorage implements BitStorage {
         int i = this.cellIndex(index);
         long l = this.data[i];
         int j = (index - i * this.valuesPerLong) * this.bits;
-        this.data[i] = l & ~(this.mask << j) | ((long)value & this.mask) << j;
+        this.data[i] = l & ~(this.MASKS[this.bits] << j) | ((long)value & this.MASKS[this.bits]) << j;
     }
 
     @Override
@@ -106,7 +117,7 @@ public class SimpleBitStorage implements BitStorage {
         int i = this.cellIndex(index);
         long l = this.data[i];
         int j = (index - i * this.valuesPerLong) * this.bits;
-        return (int)(l >> j & this.mask);
+        return (int)(l >> j & this.MASKS[this.bits]);
     }
 
     @Override
@@ -135,7 +146,7 @@ public class SimpleBitStorage implements BitStorage {
             long l = along[k];
 
             for (int i1 = 0; i1 < this.valuesPerLong; ++i1) {
-                consumer.accept(i, (int) (l & this.mask));
+                consumer.accept(i, (int) (l & this.MASKS[this.bits]));
                 l >>= this.bits;
                 ++i;
                 if (i >= this.size) {
@@ -152,7 +163,7 @@ public class SimpleBitStorage implements BitStorage {
 
         for(long l : this.data) {
             for(int j = 0; j < this.valuesPerLong; ++j) {
-                action.accept((int)(l & this.mask));
+                action.accept((int)(l & this.MASKS[this.bits]));
                 l >>= this.bits;
                 ++i;
                 if (i >= this.size) {
@@ -172,7 +183,7 @@ public class SimpleBitStorage implements BitStorage {
             long l = this.data[k];
 
             for(int m = 0; m < this.valuesPerLong; ++m) {
-                is[j + m] = (int)(l & this.mask);
+                is[j + m] = (int)(l & this.MASKS[this.bits]);
                 l >>= this.bits;
             }
 
@@ -184,7 +195,7 @@ public class SimpleBitStorage implements BitStorage {
             long o = this.data[i - 1];
 
             for(int p = 0; p < n; ++p) {
-                is[j + p] = (int)(o & this.mask);
+                is[j + p] = (int)(o & this.MASKS[this.bits]);
                 o >>= this.bits;
             }
         }
