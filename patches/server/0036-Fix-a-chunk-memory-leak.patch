From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Fri, 4 Nov 2022 14:23:27 +0100
Subject: [PATCH] Fix a chunk memory leak.


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 6c4d29bce68023181016e966339658df7d4fd782..dfd91f8819f8d83b0524df48a4861894b13264d5 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -142,7 +142,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     private final PoiManager poiManager;
     public final LongSet toDrop;
     private boolean modified;
-    private final ChunkTaskPriorityQueueSorter queueSorter;
+    public final ChunkTaskPriorityQueueSorter queueSorter;
     private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> worldgenMailbox;
     public final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> mainThreadMailbox;
     // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
index e67c1088ef0893c6deadb471eefd8874ee28943e..d1e35fcde758268e38c40c4ac9b41eaeeacae8ef 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueue.java
@@ -7,18 +7,18 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import java.util.List;
+import java.util.ArrayList;
 import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.ChunkPos;
+import java.util.NoSuchElementException;
 
 public class ChunkTaskPriorityQueue<T> {
     public static final int PRIORITY_LEVEL_COUNT = ChunkMap.MAX_CHUNK_DISTANCE + 2;
-    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue = IntStream.range(0, PRIORITY_LEVEL_COUNT).mapToObj((i) -> {
-        return new Long2ObjectLinkedOpenHashMap();
-    }).collect(Collectors.toList());
+    private final List<Long2ObjectLinkedOpenHashMap<List<Optional<T>>>> taskQueue;
     private volatile int firstQueue = PRIORITY_LEVEL_COUNT;
     private final String name;
     private final LongSet acquired = new LongOpenHashSet();
@@ -27,6 +27,10 @@ public class ChunkTaskPriorityQueue<T> {
     public ChunkTaskPriorityQueue(String name, int maxSize) {
         this.name = name;
         this.maxTasks = maxSize;
+        this.taskQueue = new ArrayList();
+        for (int i = 0 ; i < PRIORITY_LEVEL_COUNT ; i++) {
+            this.taskQueue.add(new Long2ObjectLinkedOpenHashMap());
+        }
     }
 
     protected void resortChunkTasks(int fromLevel, ChunkPos pos, int toLevel) {
@@ -101,12 +105,17 @@ public class ChunkTaskPriorityQueue<T> {
             List<Optional<T>> list;
             for(list = long2ObjectLinkedOpenHashMap.removeFirst(); this.hasWork() && this.taskQueue.get(this.firstQueue).isEmpty(); ++this.firstQueue) {
             }
-
-            return list.stream().map((optional) -> {
-                return optional.map(Either::left).orElseGet(() -> {
-                    return Either.right(this.acquire(l));
-                });
-            });
+            List<Either<T, Runnable>> r = new ArrayList();
+            for (var optional: list) {
+                Either<T, Runnable> run;
+                try {
+                    run = Either.left(optional.get());
+                } catch (NoSuchElementException ex) {
+                    run = Either.right(this.acquire(l));
+                }
+                r.add(run);
+            }
+            return r.stream();
         }
     }
 
@@ -123,4 +132,12 @@ public class ChunkTaskPriorityQueue<T> {
     LongSet getAcquired() {
         return new LongOpenHashSet(this.acquired);
     }
+
+    public long totalSize() {
+        long size = 0;
+        for (var queue: taskQueue) {
+            size += queue.size();
+        }
+        return size;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
index b77cf467f149f07a6c9513457947efb367d9e779..7a4bb8c7893661e59afdbf882da18c101ac24fcf 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTaskPriorityQueueSorter.java
@@ -67,21 +67,23 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public <T> ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<T>> getProcessor(ProcessorHandle<T> executor, boolean addBlocker) {
-        return this.mailbox.ask((yield) -> {
+        return (ProcessorHandle<Message<T>>)this.mailbox.ask((yield) -> {
             return new StrictQueue.IntRunnable(0, () -> {
                 this.getQueue(executor);
                 yield.tell(ProcessorHandle.of("chunk priority sorter around " + executor.name(), (task) -> {
-                    this.submit(executor, task.task, task.pos, task.level, addBlocker);
+                    var t = (Message<T>)task;
+                    this.submit(executor, t.task, t.pos, t.level, addBlocker);
                 }));
             });
         }).join();
     }
 
     public ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> getReleaseProcessor(ProcessorHandle<Runnable> executor) {
-        return this.mailbox.ask((yield) -> {
+        return (ProcessorHandle<ChunkTaskPriorityQueueSorter.Release>)this.mailbox.ask((yield) -> {
             return new StrictQueue.IntRunnable(0, () -> {
                 yield.tell(ProcessorHandle.of("chunk priority sorter around " + executor.name(), (message) -> {
-                    this.release(executor, message.pos, message.task, message.clearQueue);
+                    var t = (Release)message;
+                    this.release(executor, t.pos, t.task, t.clearQueue);
                 }));
             });
         }).join();
@@ -152,7 +154,7 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
         if (chunkTaskPriorityQueue == null) {
             throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("No queue for: " + actor));
         } else {
-            return chunkTaskPriorityQueue;
+            return (ChunkTaskPriorityQueue<Function<ProcessorHandle<Unit>,T>>)chunkTaskPriorityQueue;
         }
     }
 
@@ -165,15 +167,23 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
         }).collect(Collectors.joining(",")) + ", s=" + this.sleeping.size();
     }
 
+    public long totalSize() {
+        final java.util.concurrent.atomic.AtomicLong size = new java.util.concurrent.atomic.AtomicLong(0);
+        this.queues.values().forEach((queue) -> {
+            size.addAndGet(queue.totalSize());
+        });
+        return size.longValue();
+    }
+
     @Override
     public void close() {
         this.queues.keySet().forEach(ProcessorHandle::close);
     }
 
     public static final class Message<T> {
-        final Function<ProcessorHandle<Unit>, T> task;
-        final long pos;
-        final IntSupplier level;
+        public final Function<ProcessorHandle<Unit>, T> task;
+        public final long pos;
+        public final IntSupplier level;
 
         Message(Function<ProcessorHandle<Unit>, T> taskFunction, long pos, IntSupplier lastLevelUpdatedToProvider) {
             this.task = taskFunction;
@@ -183,9 +193,9 @@ public class ChunkTaskPriorityQueueSorter implements ChunkHolder.LevelChangeList
     }
 
     public static final class Release {
-        final Runnable task;
-        final long pos;
-        final boolean clearQueue;
+        public final Runnable task;
+        public final long pos;
+        public final boolean clearQueue;
 
         Release(Runnable callback, long pos, boolean removeTask) {
             this.task = callback;
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index d1b5c25b7455174e908cd6ed66789fa700190604..ede901293c99677af7e8c22bff24ff83a7d7284a 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -186,6 +186,7 @@ public abstract class DistanceManager {
         //this.f.a(); // Paper - no longer used
         //this.tickingTicketsTracker.runAllUpdates(); // Paper - no longer used
         org.spigotmc.AsyncCatcher.catchOp("DistanceManagerTick"); // Paper
+        if (chunkStorage.queueSorter.totalSize() > 5000) return false; // MultiPaper - prevent memory leak
         // this.playerTicketManager.runAllUpdates(); // Paper - no longer used
         boolean flag = this.ticketLevelPropagator.propagateUpdates(); // Paper - replace ticket level propagator
 
