From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Sun, 4 Dec 2022 17:58:09 +0100
Subject: [PATCH] Optimize RapidLog entity profiling.


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 4081b6ff19c83cc000ad2d7c76e788e63ef0a0f4..0c11e285dd71a75d471357b16e025e07f0e47ac7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -717,8 +717,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
         totalTicked = 0; // Xymb
         Object2LongOpenHashMap<Class<?>> entityTimings = new Object2LongOpenHashMap(); // Xymb
         Object2IntOpenHashMap<Class<?>> entityCounts = new Object2IntOpenHashMap(); // Xymb
+        Object2IntOpenHashMap<Class<?>> entityTotalCounts = new Object2IntOpenHashMap(); // Xymb
         final long TOTAL_TIME_PER_ENTITY_TYPE = 10000000L; // Xymb
         final int SPAM_LIMIT_PER_ENTITY_TYPE = 1000; // Xymb
+        final int ENTITIES_TO_ESTIMATE_TIME_FROM = 20; // Xymb
 
         if (flag || this.emptyTime++ < 300) {
             gameprofilerfiller.push("entities");
@@ -756,18 +758,24 @@ public class ServerLevel extends Level implements WorldGenLevel {
                             gameprofilerfiller.push("tick");
                             // Airplane start - copied from this.guardEntityTick
                             try {
-                                long entityTickTime = System.nanoTime(); // Xymb
-
+                                long entityTickTime = 0;
                                 if (entityTimings.getOrDefault(entity.getClass(), 0) < TOTAL_TIME_PER_ENTITY_TYPE) { // Xymb
+                                    int count = entityCounts.getOrDefault(entity.getClass(), 0);
+                                    long totalTime = entityTimings.getOrDefault(entity.getClass(), 0);
+                                    if (count < ENTITIES_TO_ESTIMATE_TIME_FROM) entityTickTime = System.nanoTime(); // Xymb
+
                                     totalTicked++;
                                     this.tickNonPassenger(entity); // Airplane - changed
-                                }
 
-                                entityTickTime = System.nanoTime() - entityTickTime; // Xymb
-                                entityTimings.addTo(entity.getClass(), entityTickTime); // Xymb
-                                entityCounts.addTo(entity.getClass(), 1); // Xymb
+                                    if (count < ENTITIES_TO_ESTIMATE_TIME_FROM)
+                                        entityTickTime = System.nanoTime() - entityTickTime; // Xymb
+                                    else
+                                        entityTickTime += entityTimings.get(entity.getClass()) / count;
+                                    entityTimings.addTo(entity.getClass(), entityTickTime); // Xymb
+                                    entityCounts.addTo(entity.getClass(), 1); // Xymb
+                                }
+                                entityTotalCounts.addTo(entity.getClass(), 1); // Xymb
 
-                                MinecraftServer.getServer().executeMidTickTasks(); // Paper - execute chunk tasks mid tick
                             } catch (Throwable throwable) {
                                 if (throwable instanceof ThreadDeath) throw throwable; // Paper
                                 // Paper start - Prevent tile entity and entity crashes
@@ -789,11 +797,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
             xymb.RapidLogger.i().timedLogRaw(globalStart, "ENTITIES;" + getWorld().getName() + ";" + String.valueOf(totalEntities) + ";" + String.valueOf(totalTicked)); // Xymb
             entityTimings.forEach((classType, totalTime) -> {
-                xymb.RapidLogger.i().logRaw("ENTITY;" + getWorld().getName() + ";" + classType.toString() + ";" + String.valueOf(entityCounts.get(classType)) + ";" + String.valueOf(totalTime));
+                xymb.RapidLogger.i().logRaw("ENTITY;" + getWorld().getName() + ";" + classType.toString() + ";" + String.valueOf(entityTotalCounts.get(classType)) + ";" + String.valueOf(entityCounts.get(classType)) + ";" + String.valueOf(totalTime));
 
                 boolean properType = AbstractHurtingProjectile.class.isAssignableFrom(classType) || ThrowableProjectile.class.isAssignableFrom(classType) || net.minecraft.world.entity.item.PrimedTnt.class.isAssignableFrom(classType);
 
-                if (properType && totalTime > TOTAL_TIME_PER_ENTITY_TYPE && entityCounts.get(classType).intValue() > SPAM_LIMIT_PER_ENTITY_TYPE) {
+                if (properType && totalTime > TOTAL_TIME_PER_ENTITY_TYPE && entityTotalCounts.get(classType).intValue() > SPAM_LIMIT_PER_ENTITY_TYPE) {
                     long start = System.nanoTime();
 
                     this.entityTickList.forEach((entity) -> {
@@ -809,6 +817,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
             xymb.RapidLogger.i().timedLogRaw(globalStart, "BLOCK_ENTITIES;" + getWorld().getName()); // Xymb
             globalStart = System.nanoTime(); // Xymb
+            MinecraftServer.getServer().executeMidTickTasks(); // MultiPaper
         }
 
         gameprofilerfiller.push("entityManagement");
