From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Wed, 14 Dec 2022 03:03:24 +0100
Subject: [PATCH] Make portal enters async.


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 0c11e285dd71a75d471357b16e025e07f0e47ac7..d1f6ffa921a03faeba6c5370f10bd1353b072af5 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -189,6 +189,7 @@ import puregero.multipaper.externalserverprotocol.SpawnUpdatePacket;
 import puregero.multipaper.externalserverprotocol.TimeUpdatePacket;
 
 public class ServerLevel extends Level implements WorldGenLevel {
+    public xymb.KnownGeneratedChunks generatedChunks = new xymb.KnownGeneratedChunks();
 
     public static final BlockPos END_SPAWN_POINT = new BlockPos(100, 50, 0);
     private static final int MIN_RAIN_DELAY_TIME = 12000;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 8c7481525cac94a1d343a740633c66b05bd3ba59..71e2bbe10fa4bdb3410bf77e06eb4c899bf235b1 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3036,7 +3036,25 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 ResourceKey<Level> resourcekey = this.level.getTypeKey() == LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER; // CraftBukkit
                 ServerLevel worldserver1 = minecraftserver.getLevel(resourcekey);
 
-                if (true && !this.isPassenger() && this.portalTime++ >= i) { // CraftBukkit
+                int chunkCoordsX = (int)this.getX();
+                int chunkCoordsZ = (int)this.getZ();
+                boolean overworld = this.level.getTypeKey() == LevelStem.OVERWORLD;
+                if (overworld) {
+                    chunkCoordsX = chunkCoordsX / 16 / 8;
+                    chunkCoordsZ = chunkCoordsZ / 16 / 8;
+                } else {
+                    chunkCoordsX = chunkCoordsX / 16 * 8;
+                    chunkCoordsZ = chunkCoordsZ / 16 * 8;
+                }
+                boolean everythingLoaded = true;
+
+                for (int x = -3 ; x <= 3 ; x++)
+                    for (int z = -3 ; z <= 3 ; z++)
+                        if (worldserver1.generatedChunks.alreadyGenerated(worldserver1.chunkSource, chunkCoordsX + x, chunkCoordsZ + z) == false)
+                            everythingLoaded = false;
+
+                boolean failedPortalTravel = false;
+                if (true && !this.isPassenger() && this.portalTime++ >= i && everythingLoaded) { // CraftBukkit
                     this.level.getProfiler().push("portal");
                     this.portalTime = i;
                     // Paper start
@@ -3056,9 +3074,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                     } // Paper
                     // CraftBukkit end
                     this.level.getProfiler().pop();
+                    this.portalTime = i - 20;
+                    if (this.level == worldserver) {
+                        System.out.println("Failed portal travel!");
+                        failedPortalTravel = true;
+                    }
                 }
 
-                this.isInsidePortal = false;
+                if (!failedPortalTravel) this.isInsidePortal = false;
             } else {
                 if (this.portalTime > 0) {
                     this.portalTime -= 4;
diff --git a/src/main/java/xymb/KnownGeneratedChunks.java b/src/main/java/xymb/KnownGeneratedChunks.java
new file mode 100644
index 0000000000000000000000000000000000000000..bda9e26fce78359d30e9e92bfdde0f0fadaed384
--- /dev/null
+++ b/src/main/java/xymb/KnownGeneratedChunks.java
@@ -0,0 +1,31 @@
+package xymb;
+
+import it.unimi.dsi.fastutil.longs.Long2BooleanOpenHashMap;
+import net.minecraft.server.level.ServerLevel;
+import ca.spottedleaf.starlight.common.util.CoordinateUtils;
+import net.minecraft.server.level.ServerChunkCache;
+
+public class KnownGeneratedChunks {
+    Long2BooleanOpenHashMap knownLoadedChunks = new Long2BooleanOpenHashMap();
+
+    public boolean alreadyGenerated(ServerChunkCache chunkSource, int x, int z) {
+        if (x > 30000000 / 16) x = 30000000 / 16;
+        if (x < -30000000 / 16) x = -30000000 / 16;
+        if (z > 30000000 / 16) z = 30000000 / 16;
+        if (z < -30000000 / 16) z = -30000000 / 16;
+        long key = CoordinateUtils.getChunkKey(x, z);
+        synchronized (knownLoadedChunks) {
+            if (knownLoadedChunks.get(key)) return true;
+            if (!knownLoadedChunks.containsKey(key)) {
+                chunkSource.getChunkAtAsynchronously(x, z, true, true).whenCompleteAsync((either, ex) -> {
+                    synchronized (knownLoadedChunks) {
+                        knownLoadedChunks.put(key, true);
+                    }
+                });
+                knownLoadedChunks.put(key, false);
+            }
+        }
+
+        return false;
+    }
+}
